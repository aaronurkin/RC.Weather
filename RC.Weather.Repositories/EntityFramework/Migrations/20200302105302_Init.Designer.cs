// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RC.Weather.Repositories.EntityFramework;

namespace RC.Weather.Repositories.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200302105302_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RC.Weather.Repositories.Models.ConditionDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCode");

                    b.Property<double>("Temperature");

                    b.Property<string>("WeatherText");

                    b.HasKey("Id");

                    b.HasIndex("CityCode")
                        .IsUnique()
                        .HasFilter("[CityCode] IS NOT NULL");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("RC.Weather.Repositories.Models.FavoriteCityDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCode");

                    b.Property<string>("CityName");

                    b.HasKey("Id");

                    b.HasIndex("CityCode")
                        .IsUnique()
                        .HasFilter("[CityCode] IS NOT NULL");

                    b.ToTable("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
